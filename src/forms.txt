FORMULARIOS POR TEMPLATE
La mayor parte de la configuración se realiza en el html.

1) Importar formsModule en el módulo en el que se va a trabajar, en este caso el templateModule.

-(ngSubmit): Sirve para realizar el submit del formulario, se coloca en el <form>.

2) En el <form> creamos una referencia local (#) y le asignamos en ngForm. Lo mandamos como parametro en el ngSubmit. El ".value" es el valor que nos importa.

3) Para poder enlazar los valores del los inputs con los del ".value" tenemos que colocar el "ngModel" (sin comillas) en cada input y asignarles un name a cada input también.

VALIDACIONES DE FORMULARIOS POR TEMPLATE
1) Podemos usar el "valid", el "pristine" y el "touched".
2) Podemos usar un *ngIf y buscar el miFormulario.controls.nameAsignado?.invalid && (para el valid) o lo mismo con el .touched para el touched. Esto se podría hacer en el HTML pero eso lo haría muy difícil de leer, así que podemos hacer una función para ello.

VIEWCHILD
Para poder hacer la función de validación tenemos que usar el decorador @ViewChild() y mandarle la referencia local del fomulario, poner el ! ya que siempre va a mandar un valor, poner : nombrarla, y poner el tipado (ngForm)

1) Al hacer esto de poner nuestra referencia en el componente ts, nos ahorramos el tener que mandar nuestra referencia local como parámetro en el ngSubmit. Y ahora solo nos manejamos con la referencia desde el component .ts

2) Creamos la función y copiamos todo lo que teníamos antes en el html agregandole un ? a la referencia.


DIRECTIVAS PERSONALIZADAS
1) Crear una carpeta con el nombre directives y dentro de esta crear el componente-min.directive.ts.
2) Declaramos la directiva en el módulo en el cual estamos trabajando.
3) Como propiedad del input agregamos la directiva personalizada, le ponemos un nombre, en este caso "customMin" y le agregamos una propiedad entre [], en este caso [minimo].
4) En el archivo de directivas, ponemos el decorador @Directive(), que tiene un selector al cual le colocamos el nombre de la directiva que pusimos en el input y el ngModel ambos entre []: '[customMin] [ngModel]'.
5) Recibimos el valor a traves de un @Input() nombre!: number;
6) Para realizar validaciones como el required o el minLength por ejemplo necesitamos implementar el Validator de @Angular/core
7) Junto con los selectors tambien recibimos los providers que es un arreglo de objetos que son los siguientes para este caso:
    providers: [{
        provide: NG_VALIDATORS,
        useExisting: CustomMinDirective,
        multi: true 
    }]
8) Crear una función validate que recibe un control (input) de tipo FormControl.
9) Creamos una constante y almacenamos el control.value
10) Realizar un return con las validaciones, en este caso usamos un ternario:
    return (constanteAlmacenada < this.minimo ) ? { 'customMin': true } : null;
11) Ponerle required al input.


RESETEAR FORMULARIO

Gracias a que con el ViewChild creamos la referencia en el componente ts. solo debemos hacer lo siguiente:
1) En la función guardar debemos usar el this.miFormulario.resetForm().

VALORES POR DEFECTO EN UN FORMULARIO
Para poner valores por defecto en un formulario tenemos que crear una propiedad que se llame valorInicial por ejemplo, y tiene que ser un objeto con las mismas propiedades que tenemos en el html.
2) Luego a cada input en su ngModel lo encerramos en [] y le ponemos el valor igual a "valorInicial.precio"

*) Si queremos que al postear el formulario de manera exitosa este quede con unos valores determinados, en el resetForm() mandamos un objeto con el nombre de las propiedades y les asignamos el valor que se quiera.


RADIOS, CHECKS, SWITCHES
1) Crear las propiedades en el componente .ts.
2) Enlazarlas a traves de un [(ngModel)]
3) Ponerles un nombre.
4) Ponerles un value.


--------------------------------------------------------------------------------------------------------------------------------------
FORMULARIOS REACTIVOS
Para poder usar los formularios reactivos lo primero que tenemos que hacer es importar el ReactiveFormsModule de angular/forms en el módulo que vamos a utilizar.

1) Creamos el miFormulario en el componente .ts y el tipado es FormGroup = new FormGroup.
2) Este FormGroup recibe un objeto, en este objeto vamos a crear los atributos que queremos tener en el formulario. Mirar basicos.component.ts para ver un ejemplo con el 'nombre' = new FormControl('IPhone 13').
3) Para enlazar esta propiedad con el input correspondiente, en el input tenemos una propiedad que se llama formControlName y le asignamos el valor del atributo del objeto ('nombre' en este ejemplo).

FORM BUILDER
Es un servicio que se usa para hacer más legible el código cuando creamos nuestro formulario. Se recomienda este mucho mas que el anterior.
1) Inyectamos el FormBuilder en nuestro constructor
2) Creamos el miFormulario de tipo FormGroup y lo igualamos al this.formBuilder.group({
    nombre: ['Pablo'],
    apellido: ['Romero'],
    edad: [22]
})
